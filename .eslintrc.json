{
    "root": true,
    "extends": [
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "plugin:@typescript-eslint/recommended",
        "airbnb-typescript",
        "plugin:jest/recommended",
        "plugin:prettier/recommended"
    ],
    "plugins": [
        "unused-imports",
        "import",
        "decorator-position"
    ],
    "env": {
        "browser": true,
        "jasmine": true,
        "jest": true,
        "es6": true
    },
    "globals": {
        "Atomics": "readonly",
        "SharedArrayBuffer": "readonly"
    },
    "settings": {
        "react": {
            "pragma": "React",
            "version": "detect"
        },
        "import/resolver": {
            "typescript": {
                "alwaysTryTypes": true,
                "project": "./tsconfig.json"
            },
            "node": false
        },
        "import/extensions": [
            ".ts",
            ".tsx",
            ".d.ts"
        ]
    },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "ecmaVersion": 2018,
        "sourceType": "module",
        "project": "./tsconfig.json"
    },
    "rules": {
        "@typescript-eslint/array-type": [
            "error"
        ],
        "@typescript-eslint/explicit-function-return-type": 0,
        "@typescript-eslint/lines-between-class-members": [
            "error",
            "always",
            {
                "exceptAfterSingleLine": true
            }
        ],
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-non-null-assertion": 0,
        "@typescript-eslint/no-unused-expressions": "warn",
        "@typescript-eslint/no-unused-vars": [
            "warn",
            {
                "argsIgnorePattern": "^_",
                "varsIgnorePattern": "^_",
                "caughtErrorsIgnorePattern": "^_"
            }
        ],
        "@typescript-eslint/no-use-before-define": 0,
        "consistent-return": 0,
        "curly": [
            "error",
            "all"
        ],
        "decorator-position/decorator-position": "error",
        "function-call-argument-newline": "off",
        "import/no-extraneous-dependencies": 0,
        "import/prefer-default-export": 0,
        "jsx-a11y/anchor-is-valid": 0,
        "jsx-a11y/aria-role": 0,
        "no-nested-ternary": "warn",
        "no-restricted-imports": [
            "error",
            {
                "patterns": [
                    "../**",
                    "@material-ui/*/*/*",
                    "!@material-ui/core/styles/createBreakpoints",
                    "!@material-ui/core/styles/createPalette",
                    "!@material-ui/core/styles/shadows",
                    "!@material-ui/pickers/*/*",
                    "!@material-ui/core/test-utils/*"
                ]
            }
        ],
        "object-curly-spacing": "off",
        "prettier/prettier": [
            "error"
        ],
        "radix": 0,
        "react-hooks/exhaustive-deps": "warn",
        "react-hooks/rules-of-hooks": "error",
        "react/destructuring-assignment": [
            "error",
            "always",
            {
                "ignoreClassFields": true
            }
        ],
        "react/display-name": 0,
        "react/jsx-key": "warn",
        "react/jsx-no-duplicate-props": [
            "error",
            {
                "ignoreCase": true
            }
        ],
        "react/jsx-props-no-spreading": 0,
        "react/jsx-uses-react": 0,
        "react/no-array-index-key": "warn",
        "react/prop-types": 0,
        "react/react-in-jsx-scope": 0,
        "react/require-default-props": 0,
        "react/state-in-constructor": 0,
        "unused-imports/no-unused-imports": "error"
    },
    "overrides": [
        {
            "files": [
                "*.ts"
            ],
            "excludedFiles": [
                "*.styles.ts",
                "styles.ts"
            ],
            "rules": {
                "@typescript-eslint/naming-convention": [
                    "error",
                    {
                        "selector": "accessor",
                        "format": [
                            "camelCase"
                        ]
                    },
                    {
                        "selector": "method",
                        "format": [
                            "camelCase"
                        ]
                    },
                    {
                        "selector": "typeLike",
                        "format": [
                            "PascalCase"
                        ]
                    },
                    {
                        "selector": "classProperty",
                        "format": [
                            "camelCase"
                        ]
                    }
                ]
            }
        }
    ]
}